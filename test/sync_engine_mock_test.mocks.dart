// Mocks generated by Mockito 5.4.6 from annotations
// in easy_comic/test/sync_engine_mock_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:easy_comic/core/webdav_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [WebDAVService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebDAVService extends _i1.Mock implements _i2.WebDAVService {
  MockWebDAVService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get host =>
      (super.noSuchMethod(
            Invocation.getter(#host),
            returnValue: _i3.dummyValue<String>(this, Invocation.getter(#host)),
          )
          as String);

  @override
  String get user =>
      (super.noSuchMethod(
            Invocation.getter(#user),
            returnValue: _i3.dummyValue<String>(this, Invocation.getter(#user)),
          )
          as String);

  @override
  String get password =>
      (super.noSuchMethod(
            Invocation.getter(#password),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#password),
            ),
          )
          as String);

  @override
  _i4.Future<List<_i2.WebDAVFileInfo>> listDir(String? remotePath) =>
      (super.noSuchMethod(
            Invocation.method(#listDir, [remotePath]),
            returnValue: _i4.Future<List<_i2.WebDAVFileInfo>>.value(
              <_i2.WebDAVFileInfo>[],
            ),
          )
          as _i4.Future<List<_i2.WebDAVFileInfo>>);

  @override
  _i4.Future<_i2.WebDAVFileInfo?> getFileInfo(String? remotePath) =>
      (super.noSuchMethod(
            Invocation.method(#getFileInfo, [remotePath]),
            returnValue: _i4.Future<_i2.WebDAVFileInfo?>.value(),
          )
          as _i4.Future<_i2.WebDAVFileInfo?>);

  @override
  _i4.Future<void> download(String? remotePath, String? localPath) =>
      (super.noSuchMethod(
            Invocation.method(#download, [remotePath, localPath]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> upload(String? localPath, String? remotePath) =>
      (super.noSuchMethod(
            Invocation.method(#upload, [localPath, remotePath]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> mkdir(String? remotePath) =>
      (super.noSuchMethod(
            Invocation.method(#mkdir, [remotePath]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> remove(String? remotePath) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [remotePath]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> exists(String? remotePath) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [remotePath]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
