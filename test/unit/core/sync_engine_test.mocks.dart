// Mocks generated by Mockito 5.4.6 from annotations
// in easy_comic/test/unit/core/sync_engine_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:easy_comic/core/error/failures.dart' as _i6;
import 'package:easy_comic/domain/entities/bookmark.dart' as _i15;
import 'package:easy_comic/domain/entities/comic.dart' as _i12;
import 'package:easy_comic/domain/entities/comic_progress.dart' as _i13;
import 'package:easy_comic/domain/entities/favorite.dart' as _i17;
import 'package:easy_comic/domain/entities/reader_settings.dart' as _i9;
import 'package:easy_comic/domain/entities/webdav_config.dart' as _i3;
import 'package:easy_comic/domain/repositories/bookmark_repository.dart'
    as _i14;
import 'package:easy_comic/domain/repositories/comic_repository.dart' as _i11;
import 'package:easy_comic/domain/repositories/favorite_repository.dart'
    as _i16;
import 'package:easy_comic/domain/repositories/settings_repository.dart' as _i8;
import 'package:easy_comic/domain/services/webdav_service.dart' as _i4;
import 'package:flutter/material.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebDAVConfig_1 extends _i1.SmartFake implements _i3.WebDAVConfig {
  _FakeWebDAVConfig_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WebDAVService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebDAVService extends _i1.Mock implements _i4.WebDAVService {
  MockWebDAVService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> backup({
    required _i3.WebDAVConfig? config,
    required String? fileName,
    required _i7.Uint8List? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#backup, [], {
              #config: config,
              #fileName: fileName,
              #data: data,
            }),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i6.Failure, _i2.Unit>(
                this,
                Invocation.method(#backup, [], {
                  #config: config,
                  #fileName: fileName,
                  #data: data,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.Uint8List>> restore({
    required _i3.WebDAVConfig? config,
    required String? fileName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#restore, [], {
              #config: config,
              #fileName: fileName,
            }),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.Uint8List>>.value(
                  _FakeEither_0<_i6.Failure, _i7.Uint8List>(
                    this,
                    Invocation.method(#restore, [], {
                      #config: config,
                      #fileName: fileName,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.Uint8List>>);
}

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i8.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i9.ReaderSettings>> getReaderSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getReaderSettings, []),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i9.ReaderSettings>>.value(
                  _FakeEither_0<_i6.Failure, _i9.ReaderSettings>(
                    this,
                    Invocation.method(#getReaderSettings, []),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i9.ReaderSettings>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> saveReaderSettings(
    _i9.ReaderSettings? settings,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveReaderSettings, [settings]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#saveReaderSettings, [settings]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.WebDAVConfig> getWebDAVConfig() =>
      (super.noSuchMethod(
            Invocation.method(#getWebDAVConfig, []),
            returnValue: _i5.Future<_i3.WebDAVConfig>.value(
              _FakeWebDAVConfig_1(
                this,
                Invocation.method(#getWebDAVConfig, []),
              ),
            ),
          )
          as _i5.Future<_i3.WebDAVConfig>);

  @override
  _i5.Future<void> saveWebDAVConfig(_i3.WebDAVConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#saveWebDAVConfig, [config]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i10.ThemeMode> getThemeMode() =>
      (super.noSuchMethod(
            Invocation.method(#getThemeMode, []),
            returnValue: _i5.Future<_i10.ThemeMode>.value(
              _i10.ThemeMode.system,
            ),
          )
          as _i5.Future<_i10.ThemeMode>);

  @override
  _i5.Future<void> setThemeMode(_i10.ThemeMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setThemeMode, [mode]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<double> getBrightness() =>
      (super.noSuchMethod(
            Invocation.method(#getBrightness, []),
            returnValue: _i5.Future<double>.value(0.0),
          )
          as _i5.Future<double>);

  @override
  _i5.Future<void> setBrightness(double? brightness) =>
      (super.noSuchMethod(
            Invocation.method(#setBrightness, [brightness]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [ComicRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockComicRepository extends _i1.Mock implements _i11.ComicRepository {
  MockComicRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>> getComicsInBookshelf(
    int? bookshelfId, {
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getComicsInBookshelf,
              [bookshelfId],
              {#limit: limit, #offset: offset},
            ),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i12.Comic>>(
                    this,
                    Invocation.method(
                      #getComicsInBookshelf,
                      [bookshelfId],
                      {#limit: limit, #offset: offset},
                    ),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>>);

  @override
  _i5.Stream<_i2.Either<_i6.Failure, List<_i12.Comic>>> watchComicsInBookshelf(
    int? bookshelfId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#watchComicsInBookshelf, [bookshelfId]),
            returnValue:
                _i5.Stream<_i2.Either<_i6.Failure, List<_i12.Comic>>>.empty(),
          )
          as _i5.Stream<_i2.Either<_i6.Failure, List<_i12.Comic>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i12.Comic>> getComic(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getComic, [id]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, _i12.Comic>>.value(
              _FakeEither_0<_i6.Failure, _i12.Comic>(
                this,
                Invocation.method(#getComic, [id]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i12.Comic>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i12.Comic>> getComicById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getComicById, [id]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, _i12.Comic>>.value(
              _FakeEither_0<_i6.Failure, _i12.Comic>(
                this,
                Invocation.method(#getComicById, [id]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i12.Comic>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> addComic(_i12.Comic? comic) =>
      (super.noSuchMethod(
            Invocation.method(#addComic, [comic]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#addComic, [comic]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> updateComic(_i12.Comic? comic) =>
      (super.noSuchMethod(
            Invocation.method(#updateComic, [comic]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#updateComic, [comic]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> deleteComic(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteComic, [id]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#deleteComic, [id]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<List<_i12.Comic>> getAllComics() =>
      (super.noSuchMethod(
            Invocation.method(#getAllComics, []),
            returnValue: _i5.Future<List<_i12.Comic>>.value(<_i12.Comic>[]),
          )
          as _i5.Future<List<_i12.Comic>>);

  @override
  _i5.Future<List<_i13.ComicProgress>> getAllProgress() =>
      (super.noSuchMethod(
            Invocation.method(#getAllProgress, []),
            returnValue: _i5.Future<List<_i13.ComicProgress>>.value(
              <_i13.ComicProgress>[],
            ),
          )
          as _i5.Future<List<_i13.ComicProgress>>);

  @override
  _i5.Future<void> clearAndInsertComics(List<_i12.Comic>? comics) =>
      (super.noSuchMethod(
            Invocation.method(#clearAndInsertComics, [comics]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> applySyncChanges(
    List<_i13.ComicProgress>? progressToUpdate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#applySyncChanges, [progressToUpdate]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>> searchComicsInBookshelf(
    int? bookshelfId,
    String? query,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchComicsInBookshelf, [bookshelfId, query]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i12.Comic>>(
                    this,
                    Invocation.method(#searchComicsInBookshelf, [
                      bookshelfId,
                      query,
                    ]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>> sortComicsInBookshelf(
    int? bookshelfId,
    _i11.SortType? sortType,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#sortComicsInBookshelf, [bookshelfId, sortType]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i12.Comic>>(
                    this,
                    Invocation.method(#sortComicsInBookshelf, [
                      bookshelfId,
                      sortType,
                    ]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>>);
}

/// A class which mocks [BookmarkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookmarkRepository extends _i1.Mock
    implements _i14.BookmarkRepository {
  MockBookmarkRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i15.Bookmark>>> getBookmarksForComic(
    String? comicId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getBookmarksForComic, [comicId]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, List<_i15.Bookmark>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i15.Bookmark>>(
                    this,
                    Invocation.method(#getBookmarksForComic, [comicId]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, List<_i15.Bookmark>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> addBookmark(
    _i15.Bookmark? bookmark,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addBookmark, [bookmark]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#addBookmark, [bookmark]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> removeBookmark(
    String? comicId,
    int? pageIndex,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeBookmark, [comicId, pageIndex]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#removeBookmark, [comicId, pageIndex]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> removeBookmarksForComic(
    String? comicId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeBookmarksForComic, [comicId]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#removeBookmarksForComic, [comicId]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<List<_i15.Bookmark>> getBookmarks(String? comicId) =>
      (super.noSuchMethod(
            Invocation.method(#getBookmarks, [comicId]),
            returnValue: _i5.Future<List<_i15.Bookmark>>.value(
              <_i15.Bookmark>[],
            ),
          )
          as _i5.Future<List<_i15.Bookmark>>);

  @override
  _i5.Future<void> deleteBookmark(String? bookmarkId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBookmark, [bookmarkId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateBookmark(_i15.Bookmark? bookmark) =>
      (super.noSuchMethod(
            Invocation.method(#updateBookmark, [bookmark]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i15.Bookmark?> getBookmarkById(String? bookmarkId) =>
      (super.noSuchMethod(
            Invocation.method(#getBookmarkById, [bookmarkId]),
            returnValue: _i5.Future<_i15.Bookmark?>.value(),
          )
          as _i5.Future<_i15.Bookmark?>);

  @override
  _i5.Stream<List<_i15.Bookmark>> watchBookmarks(String? comicId) =>
      (super.noSuchMethod(
            Invocation.method(#watchBookmarks, [comicId]),
            returnValue: _i5.Stream<List<_i15.Bookmark>>.empty(),
          )
          as _i5.Stream<List<_i15.Bookmark>>);

  @override
  _i5.Future<List<_i15.Bookmark>> getAllBookmarks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllBookmarks, []),
            returnValue: _i5.Future<List<_i15.Bookmark>>.value(
              <_i15.Bookmark>[],
            ),
          )
          as _i5.Future<List<_i15.Bookmark>>);

  @override
  _i5.Future<void> cleanupInvalidBookmarks() =>
      (super.noSuchMethod(
            Invocation.method(#cleanupInvalidBookmarks, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<Map<String, dynamic>>> exportBookmarks(String? comicId) =>
      (super.noSuchMethod(
            Invocation.method(#exportBookmarks, [comicId]),
            returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<void> importBookmarks(
    String? comicId,
    List<Map<String, dynamic>>? bookmarks,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#importBookmarks, [comicId, bookmarks]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> clearAndInsertBookmarks(List<_i15.Bookmark>? bookmarks) =>
      (super.noSuchMethod(
            Invocation.method(#clearAndInsertBookmarks, [bookmarks]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [FavoriteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteRepository extends _i1.Mock
    implements _i16.FavoriteRepository {
  MockFavoriteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i2.Either<_i6.Failure, List<_i17.Favorite>>>
  watchAllFavorites() =>
      (super.noSuchMethod(
            Invocation.method(#watchAllFavorites, []),
            returnValue:
                _i5.Stream<
                  _i2.Either<_i6.Failure, List<_i17.Favorite>>
                >.empty(),
          )
          as _i5.Stream<_i2.Either<_i6.Failure, List<_i17.Favorite>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> addComicToFavorite(
    String? comicId,
    int? favoriteId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addComicToFavorite, [comicId, favoriteId]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#addComicToFavorite, [comicId, favoriteId]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<List<_i17.Favorite>> getFavorites() =>
      (super.noSuchMethod(
            Invocation.method(#getFavorites, []),
            returnValue: _i5.Future<List<_i17.Favorite>>.value(
              <_i17.Favorite>[],
            ),
          )
          as _i5.Future<List<_i17.Favorite>>);

  @override
  _i5.Future<void> clearAndInsertFavorites(List<_i17.Favorite>? favorites) =>
      (super.noSuchMethod(
            Invocation.method(#clearAndInsertFavorites, [favorites]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, int>> createFavorite(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#createFavorite, [name]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, int>>.value(
              _FakeEither_0<_i6.Failure, int>(
                this,
                Invocation.method(#createFavorite, [name]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, int>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> deleteFavorite(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFavorite, [id]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#deleteFavorite, [id]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> removeComicFromFavorite(
    String? comicId,
    int? favoriteId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeComicFromFavorite, [comicId, favoriteId]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#removeComicFromFavorite, [
                  comicId,
                  favoriteId,
                ]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>> getComicsInFavorite(
    int? favoriteId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getComicsInFavorite, [favoriteId]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>>.value(
                  _FakeEither_0<_i6.Failure, List<_i12.Comic>>(
                    this,
                    Invocation.method(#getComicsInFavorite, [favoriteId]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, List<_i12.Comic>>>);
}
