// Mocks generated by Mockito 5.4.6 from annotations
// in easy_comic/test/unit/presentation/features/settings/webdav/bloc/webdav_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:io' as _i16;

import 'package:dartz/dartz.dart' as _i6;
import 'package:easy_comic/core/error/failures.dart' as _i10;
import 'package:easy_comic/core/services/avatar_manager.dart' as _i15;
import 'package:easy_comic/core/services/logging_service.dart' as _i14;
import 'package:easy_comic/domain/entities/reader_settings.dart' as _i12;
import 'package:easy_comic/domain/entities/webdav_config.dart' as _i7;
import 'package:easy_comic/domain/repositories/comic_repository.dart' as _i3;
import 'package:easy_comic/domain/repositories/favorite_repository.dart' as _i4;
import 'package:easy_comic/domain/repositories/settings_repository.dart' as _i5;
import 'package:easy_comic/domain/services/webdav_service.dart' as _i2;
import 'package:easy_comic/domain/usecases/backup_data_to_webdav_usecase.dart'
    as _i8;
import 'package:easy_comic/domain/usecases/restore_data_from_webdav_usecase.dart'
    as _i11;
import 'package:flutter/material.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebDAVService_0 extends _i1.SmartFake implements _i2.WebDAVService {
  _FakeWebDAVService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeComicRepository_1 extends _i1.SmartFake
    implements _i3.ComicRepository {
  _FakeComicRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFavoriteRepository_2 extends _i1.SmartFake
    implements _i4.FavoriteRepository {
  _FakeFavoriteRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettingsRepository_3 extends _i1.SmartFake
    implements _i5.SettingsRepository {
  _FakeSettingsRepository_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_4<L, R> extends _i1.SmartFake implements _i6.Either<L, R> {
  _FakeEither_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebDAVConfig_5 extends _i1.SmartFake implements _i7.WebDAVConfig {
  _FakeWebDAVConfig_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BackupDataToWebdavUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackupDataToWebdavUseCase extends _i1.Mock
    implements _i8.BackupDataToWebdavUseCase {
  MockBackupDataToWebdavUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WebDAVService get webDAVService =>
      (super.noSuchMethod(
            Invocation.getter(#webDAVService),
            returnValue: _FakeWebDAVService_0(
              this,
              Invocation.getter(#webDAVService),
            ),
          )
          as _i2.WebDAVService);

  @override
  _i3.ComicRepository get comicRepository =>
      (super.noSuchMethod(
            Invocation.getter(#comicRepository),
            returnValue: _FakeComicRepository_1(
              this,
              Invocation.getter(#comicRepository),
            ),
          )
          as _i3.ComicRepository);

  @override
  _i4.FavoriteRepository get favoriteRepository =>
      (super.noSuchMethod(
            Invocation.getter(#favoriteRepository),
            returnValue: _FakeFavoriteRepository_2(
              this,
              Invocation.getter(#favoriteRepository),
            ),
          )
          as _i4.FavoriteRepository);

  @override
  _i5.SettingsRepository get settingsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#settingsRepository),
            returnValue: _FakeSettingsRepository_3(
              this,
              Invocation.getter(#settingsRepository),
            ),
          )
          as _i5.SettingsRepository);

  @override
  _i9.Future<_i6.Either<_i10.Failure, _i6.Unit>> call(
    _i7.WebDAVConfig? config,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [config]),
            returnValue: _i9.Future<_i6.Either<_i10.Failure, _i6.Unit>>.value(
              _FakeEither_4<_i10.Failure, _i6.Unit>(
                this,
                Invocation.method(#call, [config]),
              ),
            ),
          )
          as _i9.Future<_i6.Either<_i10.Failure, _i6.Unit>>);
}

/// A class which mocks [RestoreDataFromWebdavUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestoreDataFromWebdavUseCase extends _i1.Mock
    implements _i11.RestoreDataFromWebdavUseCase {
  MockRestoreDataFromWebdavUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WebDAVService get webDAVService =>
      (super.noSuchMethod(
            Invocation.getter(#webDAVService),
            returnValue: _FakeWebDAVService_0(
              this,
              Invocation.getter(#webDAVService),
            ),
          )
          as _i2.WebDAVService);

  @override
  _i3.ComicRepository get comicRepository =>
      (super.noSuchMethod(
            Invocation.getter(#comicRepository),
            returnValue: _FakeComicRepository_1(
              this,
              Invocation.getter(#comicRepository),
            ),
          )
          as _i3.ComicRepository);

  @override
  _i4.FavoriteRepository get favoriteRepository =>
      (super.noSuchMethod(
            Invocation.getter(#favoriteRepository),
            returnValue: _FakeFavoriteRepository_2(
              this,
              Invocation.getter(#favoriteRepository),
            ),
          )
          as _i4.FavoriteRepository);

  @override
  _i9.Future<_i6.Either<_i10.Failure, _i6.Unit>> call(
    _i7.WebDAVConfig? config,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [config]),
            returnValue: _i9.Future<_i6.Either<_i10.Failure, _i6.Unit>>.value(
              _FakeEither_4<_i10.Failure, _i6.Unit>(
                this,
                Invocation.method(#call, [config]),
              ),
            ),
          )
          as _i9.Future<_i6.Either<_i10.Failure, _i6.Unit>>);
}

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i5.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i6.Either<_i10.Failure, _i12.ReaderSettings>>
  getReaderSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getReaderSettings, []),
            returnValue:
                _i9.Future<_i6.Either<_i10.Failure, _i12.ReaderSettings>>.value(
                  _FakeEither_4<_i10.Failure, _i12.ReaderSettings>(
                    this,
                    Invocation.method(#getReaderSettings, []),
                  ),
                ),
          )
          as _i9.Future<_i6.Either<_i10.Failure, _i12.ReaderSettings>>);

  @override
  _i9.Future<_i6.Either<_i10.Failure, void>> saveReaderSettings(
    _i12.ReaderSettings? settings,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveReaderSettings, [settings]),
            returnValue: _i9.Future<_i6.Either<_i10.Failure, void>>.value(
              _FakeEither_4<_i10.Failure, void>(
                this,
                Invocation.method(#saveReaderSettings, [settings]),
              ),
            ),
          )
          as _i9.Future<_i6.Either<_i10.Failure, void>>);

  @override
  _i9.Future<_i7.WebDAVConfig> getWebDAVConfig() =>
      (super.noSuchMethod(
            Invocation.method(#getWebDAVConfig, []),
            returnValue: _i9.Future<_i7.WebDAVConfig>.value(
              _FakeWebDAVConfig_5(
                this,
                Invocation.method(#getWebDAVConfig, []),
              ),
            ),
          )
          as _i9.Future<_i7.WebDAVConfig>);

  @override
  _i9.Future<void> saveWebDAVConfig(_i7.WebDAVConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#saveWebDAVConfig, [config]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i13.ThemeMode> getThemeMode() =>
      (super.noSuchMethod(
            Invocation.method(#getThemeMode, []),
            returnValue: _i9.Future<_i13.ThemeMode>.value(
              _i13.ThemeMode.system,
            ),
          )
          as _i9.Future<_i13.ThemeMode>);

  @override
  _i9.Future<void> setThemeMode(_i13.ThemeMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setThemeMode, [mode]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<double> getBrightness() =>
      (super.noSuchMethod(
            Invocation.method(#getBrightness, []),
            returnValue: _i9.Future<double>.value(0.0),
          )
          as _i9.Future<double>);

  @override
  _i9.Future<void> setBrightness(double? brightness) =>
      (super.noSuchMethod(
            Invocation.method(#setBrightness, [brightness]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i14.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#info, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void logError(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#logError, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#fatal, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AvatarManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAvatarManager extends _i1.Mock implements _i15.AvatarManager {
  MockAvatarManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i16.File?> pickAndCropImage() =>
      (super.noSuchMethod(
            Invocation.method(#pickAndCropImage, []),
            returnValue: _i9.Future<_i16.File?>.value(),
          )
          as _i9.Future<_i16.File?>);
}
