# Flutter 漫画阅读器重构规范与伪代码

## 1. 项目概述

### 1.1. 项目目标
从零开始重构 Flutter 漫画阅读器应用，建立一个清晰、可维护、可扩展的架构。新架构将支持所有现有功能和未来功能，并提供卓越的用户体验。

### 1.2. 核心架构原则
- **清晰的关注点分离**: 严格遵循整洁架构 (Clean Architecture)，将应用分为表现层 (Presentation)、领域层 (Domain) 和数据层 (Data)。
- **状态管理**: 使用 BLoC (Business Logic Component) 进行状态管理，确保可预测的状态和单向数据流。
- **依赖注入**: 使用 `GetIt` 作为服务定位器，解耦组件依赖。
- **模块化**: 功能按模块组织，每个模块都有自己的 UI、逻辑和数据处理。

## 2. 项目文件结构

```
easy_comic/
├── lib/
│   ├── core/                  # 核心服务、工具、常量
│   │   ├── services/          # (e.g., FileSystemService, WebDAVService, DatabaseService)
│   │   ├── utils/             # (e.g., ArchiveUtils, ThumbnailUtils)
│   │   └── di/                # 依赖注入容器 (injection_container.dart)
│   │
│   ├── data/                  # 数据层
│   │   ├── datasources/       # 数据源 (local/remote)
│   │   │   ├── local/         # (e.g., drift_database.dart)
│   │   │   └── remote/        # (e.g., webdav_api.dart)
│   │   ├── models/            # 数据传输对象 (DTOs) / 数据库模型
│   │   └── repositories/      # 仓库实现
│   │
│   ├── domain/                # 领域层
│   │   ├── entities/          # 业务实体 (e.g., Manga, AppSettings)
│   │   ├── repositories/      # 仓库接口
│   │   └── usecases/          # 用例 (e.g., ImportComic, SyncData)
│   │
│   ├── presentation/          # 表现层
│   │   ├── features/          # 按功能模块组织
│   │   │   ├── bookshelf/
│   │   │   ├── reader/
│   │   │   └── settings/
│   │   ├── bloc/              # 全局或共享的 BLoC
│   │   └── widgets/           # 通用小部件
│   │
│   └── main.dart              # 应用入口
│
├── test/
└── pubspec.yaml
```

## 3. 核心数据模型 (Domain/Entities)

```pseudo
// file: lib/domain/entities/manga.dart
CLASS Manga:
    PROPERTY id (String)
    PROPERTY title (String)
    PROPERTY filePath (String)
    PROPERTY coverPath (String)
    PROPERTY totalPages (int)
    PROPERTY currentPage (int)
    PROPERTY lastRead (DateTime)
    PROPERTY dateAdded (DateTime)
    PROPERTY tags (List<String>)
    PROPERTY isFavorite (bool)

// file: lib/domain/entities/app_settings.dart
CLASS AppSettings:
    // 浏览设置
    PROPERTY readingDirection (Enum: LTR, RTL)
    PROPERTY readingMode (Enum: SinglePage, DoublePage, LongStrip)
    PROPERTY pageTurnAnimation (Enum: Slide, Fade, None)
    
    // 阅读偏好
    PROPERTY autoPageTurn (bool)
    PROPERTY autoPageTurnInterval (int) // in seconds
    PROPERTY volumeKeyPageTurn (bool)
    PROPERTY tapSensitivity (Map<String, double>) // e.g., {'next': 0.3, 'prev': 0.3}

    // 外观
    PROPERTY themeMode (Enum: System, Light, Dark)
    PROPERTY customTheme (Object) // (e.g., primaryColor, backgroundColor)
    PROPERTY fontScale (double)

// file: lib/domain/entities/webdav_config.dart
CLASS WebDAVConfig:
    PROPERTY serverUrl (String)
    PROPERTY username (String)
    PROPERTY password (String) // Should be securely stored
    PROPERTY autoSync (bool)
    PROPERTY avatarPath (String) // Local path to user avatar
```

## 4. 数据库层实现 (Data Layer)

### 4.1. 数据库服务 (Drift)

```pseudo
// file: lib/data/datasources/local/drift_database.dart
DATABASE AppDatabase:
    TABLE Mangas:
        COLUMN id (String)
        COLUMN title (String)
        ... // All properties from Manga entity
    
    TABLE AppSettings:
        COLUMN id (int, autoIncrement: true)
        ... // All properties from AppSettings entity

    TABLE WebDAVConfigs:
        COLUMN id (int, autoIncrement: true)
        ... // All properties from WebDAVConfig entity

    TABLE Collections:
        COLUMN id (String)
        COLUMN name (String)

    TABLE MangaCollectionEntries:
        COLUMN mangaId (String)
        COLUMN collectionId (String)

    METHOD initialize():
        // Setup database file and run migrations
    
    METHOD performMigration(from, to):
        // Handle schema changes between versions
```

### 4.2. 数据访问对象 (DAO)

```pseudo
// In AppDatabase class
DAO MangaDao:
    METHOD watchAllMangas() -> Stream<List<Manga>>
    METHOD getMangaById(id) -> Future<Manga>
    METHOD insertManga(manga)
    METHOD updateManga(manga)
    METHOD deleteManga(id)

DAO SettingsDao:
    METHOD getSettings() -> Future<AppSettings>
    METHOD updateSettings(settings)
```

### 4.3. 仓库实现

```pseudo
// file: lib/data/repositories/manga_repository_impl.dart
CLASS MangaRepositoryImpl IMPLEMENTS IMangaRepository:
    PROPERTY mangaDao (MangaDao)

    METHOD watchAllMangas() -> Stream<List<Manga>>:
        RETURN mangaDao.watchAllMangas()

    // ... other methods
```

## 5. 文件管理服务 (Core Service)

```pseudo
// file: lib/core/services/file_system_service.dart
CLASS FileSystemService:
    METHOD importFile(filePath):
        // 1. Validate file type (ZIP, CBZ, CBR, folder, image)
        // 2. If archive, extract contents to a temporary directory using ArchiveUtils
        // 3. Generate a unique ID for the new manga
        // 4. Create a dedicated directory for the manga files
        // 5. Move extracted/selected files to the new directory
        // 6. Generate a cover thumbnail using ThumbnailUtils
        // 7. Return a new Manga object with populated data

    METHOD generateThumbnail(imagePath, outputPath):
        // Create and save a thumbnail

    METHOD cleanupStorage(mangaId):
        // Delete manga directory and all its contents
```

## 6. 核心阅读界面 (Presentation Layer)

### 6.1. 阅读器 BLoC

```pseudo
// file: lib/presentation/features/reader/bloc/reader_bloc.dart
EVENT LoadManga(mangaId)
EVENT PageChanged(pageNumber)
EVENT ZoomChanged(scale)
EVENT ToggleOverlay

STATE ReaderInitial
STATE ReaderLoading
STATE ReaderLoaded(manga, pages, currentPage, scale, isOverlayVisible)
STATE ReaderError(message)

CLASS ReaderBloc EXTENDS Bloc<ReaderEvent, ReaderState>:
    CONSTRUCTOR(mangaRepository, settingsRepository):
        ON LoadManga:
            EMIT ReaderLoading
            TRY:
                manga = mangaRepository.getMangaById(mangaId)
                pages = fileSystemService.getPagesForManga(manga.filePath)
                EMIT ReaderLoaded(manga, pages, manga.currentPage)
            CATCH error:
                EMIT ReaderError(error.message)
        
        ON PageChanged:
            // Update state and persist progress
            mangaRepository.updateMangaProgress(state.manga.id, newPage)
            EMIT state.copyWith(currentPage: newPage)
```

### 6.2. 阅读器视图

```pseudo
// file: lib/presentation/features/reader/view/reader_screen.dart
WIDGET ReaderScreen:
    BUILD(context):
        RETURN BlocProvider(
            create: (_) => getIt<ReaderBloc>()..add(LoadManga(mangaId)),
            child: BlocBuilder<ReaderBloc, ReaderState>(
                builder: (context, state) {
                    IF state is ReaderLoading:
                        RETURN LoadingIndicator()
                    IF state is ReaderLoaded:
                        RETURN Stack(
                            children: [
                                PageView.builder(
                                    // Build pages from state.pages
                                ),
                                IF state.isOverlayVisible:
                                    ReaderOverlay(
                                        // Controls for navigation, settings, etc.
                                    )
                            ]
                        )
                    IF state is ReaderError:
                        RETURN ErrorMessage(state.message)
                }
            )
        )
```

## 7. WebDAV 同步服务 (Core Service)

```pseudo
// file: lib/core/services/webdav_service.dart
CLASS WebDAVService:
    PROPERTY webdavClient

    METHOD authenticate(config):
        // Connect and verify credentials

    METHOD syncData():
        // 1. Get local data (manga progress, settings, favorites)
        // 2. Fetch remote data from WebDAV server
        // 3. Compare timestamps and resolve conflicts (e.g., last write wins)
        // 4. Upload new local data
        // 5. Download and apply new remote data
        // 6. Handle offline queue for failed operations

    METHOD uploadAvatar(imagePath):
        // Upload user avatar
```

## 8. 实施路线图

### 阶段 1: 核心架构与数据
- [x] 搭建项目结构
- [x] 定义所有数据模型 (Entities)
- [x] 实现数据库 (Drift) 和 DAOs

### 阶段 2: 基本文件导入与显示
- [ ] 实现 `FileSystemService`
- [ ] 实现漫画导入用例 (`ImportComicUseCase`)
- [ ] 实现基础书架 BLoC 和 UI，用于显示导入的漫画

### 阶段 3: 阅读器核心
- [ ] 实现 `ReaderBloc`
- [ ] 实现 `ReaderScreen`，包括 `PageView` 和手势检测
- [ ] 实现图片加载和缓存

### 阶段 4: 设置系统
- [ ] 实现 `SettingsBloc`
- [ ] 创建完整的设置界面，按类别划分
- [ ] 将用户偏好设置应用到阅读器

### 阶段 5: WebDAV 集成
- [ ] 实现 `WebDAVService`
- [ ] 实现 `WebDAVBloc` 用于管理同步状态和用户认证
- [ ] 在设置中添加 WebDAV 配置和同步触发器

### 阶段 6: 高级功能
- [ ] 实现收藏/合集系统
- [ ] 完善书架的搜索、过滤、排序功能
- [ ] 优化性能和打磨 UI